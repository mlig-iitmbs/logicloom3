---
const today = new Date();
---

<div class="cursor-dot-outline"></div>
<div class="cursor-dot"></div>
<footer class="footer">
  <div class="footer-column copyright">
    <p>&copy; 2025 LogicLooM</p>
  </div>
  <div class="footer-column links">
    <ul>
      <li><a href="/logicloom3/brochure-m25.pdf">Brochure</a></li>
      <li><a href="/logicloom3/rules">Rules</a></li>
      <li><a href="/logicloom3/tncs">Privacy Policy</a></li>
    </ul>
  </div>
  <div class="footer-column contact">
    <p>Contact us at:</p>
    <p><a href="mailto:logicloom@ds.study.iitm.ac.in" target="_blank">logicloom@ds.study.iitm.ac.in</a></p>
  </div>
</footer>









<script language=JavaScript>
var message="Function Disabled!";

function clickIE4(){
if (event.button==2){
return false;
 }
}

function clickNS4(e){
if (document.layers||document.getElementById&&!document.all){
if (e.which==2||e.which==3){
return false;
}
}
}

if (document.layers){
document.captureEvents(Event.MOUSEDOWN);
document.onmousedown=clickNS4;
}
else if (document.all&&!document.getElementById){
document.onmousedown=clickIE4;
}

document.oncontextmenu=new Function("return false")
</script>
<script>
let backtotop = select('.back-to-top')
  if (backtotop) {
    const toggleBacktotop = () => {
      if (window.scrollY > 100) {
        backtotop.classList.add('active')
      } else {
        backtotop.classList.remove('active')
      }
    }
    window.addEventListener('load', toggleBacktotop)
    onscroll(document, toggleBacktotop)
  }
</script>
<script>
var cursor = {
    delay: 8,
    _x: 0,
    _y: 0,
    endX: (window.innerWidth / 2),
    endY: (window.innerHeight / 2),
    cursorVisible: true,
    cursorEnlarged: false,
    $dot: document.querySelector('.cursor-dot'),
    $outline: document.querySelector('.cursor-dot-outline'),
    init: function() {
        // Set up element sizes
        this.dotSize = this.$dot.offsetWidth;
        this.outlineSize = this.$outline.offsetWidth;
        
        this.setupEventListeners();
        this.animateDotOutline();
    },
//     updateCursor: function(e) {
//         var self = this;    
//         console.log(e)    
//         // Show the cursor
//         self.cursorVisible = true;
//         self.toggleCursorVisibility();
//         // Position the dot
//         self.endX = e.pageX;
//         self.endY = e.pageY;
//         self.$dot.style.top = self.endY + 'px';
//         self.$dot.style.left = self.endX + 'px';
//     },
    setupEventListeners: function() {
        var self = this; 
        // Anchor hovering
        document.querySelectorAll('a').forEach(function(el) {
            el.addEventListener('mouseover', function() {
                self.cursorEnlarged = true;
                self.toggleCursorSize();
            });
            el.addEventListener('mouseout', function() {
                self.cursorEnlarged = false;
                self.toggleCursorSize();
            });
        });   
        // Click events
        document.addEventListener('mousedown', function() {
            self.cursorEnlarged = true;
            self.toggleCursorSize();
        });
        document.addEventListener('mouseup', function() {
            self.cursorEnlarged = false;
            self.toggleCursorSize();
        });
        document.addEventListener('mousemove', function(e) {
            // Show the cursor
            self.cursorVisible = true;
            self.toggleCursorVisibility();
            // Position the dot
            self.endX = e.pageX;
            self.endY = e.pageY;
            self.$dot.style.top = self.endY + 'px';
            self.$dot.style.left = self.endX + 'px';
        });
        // Hide/show cursor
        document.addEventListener('mouseenter', function(e) {
            self.cursorVisible = true;
            self.toggleCursorVisibility();
            self.$dot.style.opacity = 1;
            self.$outline.style.opacity = 1;
        });  
        document.addEventListener('mouseleave', function(e) {
            self.cursorVisible = true;
            self.toggleCursorVisibility();
            self.$dot.style.opacity = 0;
            self.$outline.style.opacity = 0;
        });
    },
    animateDotOutline: function() {
        var self = this;  
        self._x += (self.endX - self._x) / self.delay;
        self._y += (self.endY - self._y) / self.delay;
        self.$outline.style.top = self._y + 'px';
        self.$outline.style.left = self._x + 'px';
        
        requestAnimationFrame(this.animateDotOutline.bind(self));
    },
    toggleCursorSize: function() {
        var self = this;
        
        if (self.cursorEnlarged) {
            self.$dot.style.transform = 'translate(-50%, -50%) scale(0.75)';
            self.$outline.style.transform = 'translate(-50%, -50%) scale(1.5)';
        } else {
            self.$dot.style.transform = 'translate(-50%, -50%) scale(1)';
            self.$outline.style.transform = 'translate(-50%, -50%) scale(1)';
        }
    },
    toggleCursorVisibility: function() {
        var self = this;
        
        if (self.cursorVisible) {
            self.$dot.style.opacity = 1;
            self.$outline.style.opacity = 1;
        } else {
            self.$dot.style.opacity = 0;
            self.$outline.style.opacity = 0;
        }
    }
}
cursor.init();
</script>
<script>
  const phrases = [
    "LogicLooM ðŸš€",
    "IITM Paradox"
  ];
      
  let index = 0;
  let charIndex = 0;
  const typingSpeed = 100;
  const pauseDuration = 2000;
  const titleElement = document.getElementById('typing-title');
  function type() {
    if (charIndex < phrases[index].length) {
      titleElement.textContent += phrases[index].charAt(charIndex);
      charIndex++;
      setTimeout(type, typingSpeed);
    } else {
      setTimeout(deleteText, pauseDuration);
    }
  }
  function deleteText() {
    if (charIndex > 0) {
      titleElement.textContent = phrases[index].substring(0, charIndex - 1);
      charIndex--;
      setTimeout(deleteText, typingSpeed);
    } else {
      index = (index + 1) % phrases.length;
      titleElement.textContent = '';
      charIndex = 0; // Reset char index
      setTimeout(type, typingSpeed + 500);
    }
  }
  type();
</script>
<script>
document.addEventListener("DOMContentLoaded", function () {
    // Array of feedback objects (comment and author)
    const feedbacks = [
        {
            text: `"Attempted many technical events in various editions of Paradox. LogicLooM tops them all. Good support, amazing coordination and overall an excellent event. Kudos to the organizers. Will be looking forward to future events."`,
            author: "- GK"
        },
        {
            text: `"Warmup questions were like jalebi:) They wrapped around twisting it multiple times. Round2 was hard! We scratched our head for 2.5 hours and did what we could. In this process, we definitely learnt a lot. Thanks to LogicLooM team for organizing such a great event. Had too much fun and learning."`,
            author: "- Siddharth"
        },
        {
            text: `"The event was so great and well structured that a newbie in ML like me was also able to make a ML model and even get a decent score, building my confidence in the first try. Also, the organizers have also managed the event very well."`,
            author: "- Krish, Md. Shah"
        }
    ];

    let currentIndex = 0;

    // Get the elements for feedback text and author
    const feedbackTextElement = document.getElementById("feedback-text");
    const feedbackAuthorElement = document.getElementById("feedback-author");

    // Function to update the feedback content with animation
    function updateFeedback(index) {
        feedbackTextElement.classList.add("fade-out"); // Add fade-out effect

        // Wait for fade-out to complete before updating content
        setTimeout(() => {
            feedbackTextElement.innerHTML = `<i class="fa fa-quote-left" aria-hidden="true"></i> ${feedbacks[index].text}`;
            feedbackAuthorElement.textContent = feedbacks[index].author;
            feedbackTextElement.classList.remove("fade-out");
            feedbackTextElement.classList.add("fade-in"); // Add fade-in effect

            setTimeout(() => {
                feedbackTextElement.classList.remove("fade-in"); // Remove fade-in effect after transition
            }, 500);
        }, 500); // Delay to ensure smooth transition
    }

    // Initial feedback display
    updateFeedback(currentIndex);

    // Prev Button functionality
    document.querySelector('.prev-btn').addEventListener('click', function () {
        currentIndex = (currentIndex === 0) ? feedbacks.length - 1 : currentIndex - 1;
        updateFeedback(currentIndex);
    });

    // Next Button functionality
    document.querySelector('.next-btn').addEventListener('click', function () {
        currentIndex = (currentIndex === feedbacks.length - 1) ? 0 : currentIndex + 1;
        updateFeedback(currentIndex);
    });

    // Auto change feedback every 5 seconds
    setInterval(() => {
        currentIndex = (currentIndex === feedbacks.length - 1) ? 0 : currentIndex + 1;
        updateFeedback(currentIndex);
    }, 5000);
});
</script>
